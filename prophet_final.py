# -*- coding: utf-8 -*-
"""Prophet_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VYkkVBVlyQS5CNzkdFmBVlFu1MqH_tui

Bibliotecas e arquivo
"""

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

# Carregar o arquivo Excel

df = pd.read_excel("vendas.xlsx")
df.head()

"""Tratamento os dados"""

# Remover valores positivos (devoluções)

df = df[df['vendas'] < 0]
df.head()

# Converter valores negativos para positivos

df['vendas'] = df['vendas'].abs()
df.head()

# Consolidar vendas diárias em vendas mensais por SKU

df['data'] = pd.to_datetime(df['data'])  # Garantir que a coluna de datas seja datetime
df['ano_mes'] = df['data'].dt.to_period('M')  # Criar coluna ano-mês
df_mensal = df.groupby(['sku', 'ano_mes'], as_index=False)['vendas'].sum()
df_mensal['data'] = df_mensal['ano_mes'].dt.to_timestamp()  # Converter para timestamp
df_mensal.head()

df_mensal.info()

"""Preparação para prever com Prophet"""

# Criar lista para armazenar os resultados

resultados = []

for sku, grupo in df_mensal.groupby('sku'):
    # Preparar os dados para o Prophet
    grupo = grupo[['data', 'vendas']].rename(columns={'data': 'ds', 'vendas': 'y'})

    # Inicializar o modelo Prophet
    modelo = Prophet()
    modelo.fit(grupo)

    # Fazer previsões para os próximos 18 meses
    futuro = modelo.make_future_dataframe(periods=18, freq='MS')
    previsoes = modelo.predict(futuro)

    # Adicionar as previsões ao DataFrame original
    previsoes['sku'] = sku
    previsoes['vendas_previstas'] = previsoes['yhat']
    previsoes = previsoes[['sku', 'ds', 'vendas_previstas']]

    resultados.append(previsoes)

previsoes.head()

"""Incluindo previsões na planilha"""

# Concatenar todos os resultados

df_previsoes = pd.concat(resultados, ignore_index=True)
df_previsoes.head()

# Mesclar previsões com o histórico consolidado

df_final = pd.merge(df_mensal, df_previsoes, how='outer', left_on=['sku', 'data'], right_on=['sku', 'ds'])
df_final.drop(columns=['ano_mes', 'ds'], inplace=True)

df_final.head()

"""Visualização"""

# Criar gráfico comparando totais mensais

df_totais = df_final.groupby('data', as_index=False).agg({'vendas': 'sum', 'vendas_previstas': 'sum'})
plt.figure(figsize=(10, 6))
plt.plot(df_totais['data'], df_totais['vendas'], label='Total Vendas Reais', marker='o')
plt.plot(df_totais['data'], df_totais['vendas_previstas'], label='Total Previsões', linestyle='--')
plt.title("Comparação de Totais Mensais de Vendas e Previsões")
plt.xlabel("Data")
plt.ylabel("Vendas Totais")
plt.legend()
plt.grid()
plt.tight_layout()
plt.show()

# Permitir que o usuário escolha o SKU para visualizar

sku_selecionado = int(input("Digite o SKU para visualizar o gráfico: "))

# Filtrar os dados do SKU selecionado
df_selecionado = df_final[df_final['sku'] == sku_selecionado]

if not df_selecionado.empty:
    # Criar o gráfico
    plt.figure(figsize=(10, 6))
    plt.plot(df_selecionado['data'], df_selecionado['vendas'], label='Vendas Reais', marker='o')
    plt.plot(df_selecionado['data'], df_selecionado['vendas_previstas'], label='Previsões', linestyle='--')
    plt.title(f"Vendas e Previsões para SKU: {sku_selecionado}")
    plt.xlabel("Data")
    plt.ylabel("Vendas")
    plt.legend()
    plt.grid()
    plt.tight_layout()
    plt.show()
else:
    print(f"Não foram encontrados dados para o SKU '{sku_selecionado}'.")

"""Exportando para o Excel"""

# Salvar o resultado em um arquivo Excel
df_final.to_excel("vendas_com_previsoes.xlsx", index=False)
print("Resultados exportados para vendas_com_previsoes.xlsx.")